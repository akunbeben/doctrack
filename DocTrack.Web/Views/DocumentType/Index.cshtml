@model DocTrack.Web.ViewModel.DocumentTypeVM
@{
    ViewBag.Title = "Documents Type";
}

<div class="row pt-3">
    <div class="col-xl-4">

        <!--begin::Portlet-->
        <div class="kt-portlet kt-portlet--height-fluid">
            <div class="kt-portlet__head">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title">Data of Documents Type</h3>
                </div>
                <div class="kt-portlet__head-toolbar">
                    <div class="kt-portlet__head-group">
                        <button type="button" class="modal-create btn btn-primary btn-bold" onclick="onClickAdd(titleAdd, urlAddView, urlSave)">
                            <i class="flaticon2-add-1"></i> Add Document Type
                        </button>
                        <a class="btn btn-primary btn-bold" href="@Url.Action("Index", "FormType")">
                            <i class="flaticon2-copy"></i> Form Type
                        </a>
                    </div>
                </div>
            </div>
            <div class="kt-portlet__body">

                <!--begin: Datatable -->
                <div id="kt_table_1_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                    <div class="row">
                        <div class="col-sm-12">
                            <table class="table table-striped table-bordered table-hover no-footer" id="DataTable" role="grid" aria-describedby="DataTable_info">
                                <thead>
                                    <tr role="row">
                                        <th class="sorting" tabindex="0" aria-controls="DataTable" rowspan="1" colspan="1" aria-label="Company Name: activate to sort column ascending">Document Type Name</th>
                                        <th class="sorting" tabindex="0" aria-controls="DataTable" rowspan="1" colspan="1" aria-label="Company Name: activate to sort column ascending">Form Type</th>
                                        <th class="sorting" tabindex="0" aria-controls="DataTable" rowspan="1" colspan="1" aria-label="Company Name: activate to sort column ascending">Pool Name</th>
                                        <th class="sorting" tabindex="0" aria-controls="DataTable" rowspan="1" colspan="1" aria-label="Company Name: activate to sort column ascending">Document Reference</th>
                                        <th class="sorting_disabled" rowspan="1" colspan="1" aria-label="Actions">Actions</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>

                <!--end: Datatable -->
            </div>
        </div>

        <!--end::Portlet-->
    </div>
</div>

<div class="modal fade bd-example-modal-xl" data-backdrop="static" role="dialog" id="formModal" aria-labelledby="formModal" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Documents Type Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div id="modal-loading" class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>

                <span class="ml-2">loading...</span>
            </div>
            <div id="modal-form" class="p-0">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "input-form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    @Html.HiddenFor(model => model.DocumentType.DocumentTypeId, new { id = "DocumentTypeId" })
                    <div class="modal-body">
                        <div class="form-group row">
                            @Html.LabelFor(model => model.DocumentType.DocumentTypeName, new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.TextBoxFor(model => model.DocumentType.DocumentTypeName, new { @class = "form-control form-control-sm", id = "DocumentTypeName" })
                                @Html.ValidationMessageFor(model => model.DocumentType.DocumentTypeName, "", new { @class = "text-danger font-weight-light" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.DocumentType.FormType, new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.DropDownListFor(model => model.DocumentType.FormType, Model.FormType, null, new { @class = "form-control form-control-sm", @style = "width: 100%;", id = "FormType" })
                                @Html.ValidationMessageFor(model => model.DocumentType.FormType, "", new { @class = "text-danger font-weight-light" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.DocumentType.PoolName, new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.DropDownListFor(model => model.DocumentType.PoolName, new SelectList(Enumerable.Empty<SelectListItem>()), null, new { @class = "form-control form-control-sm", @style = "width: 100%;", id = "PoolName" })
                                @Html.ValidationMessageFor(model => model.DocumentType.PoolName, "", new { @class = "text-danger font-weight-light" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.DocumentType.DocumentReference, new { @class = "col-sm-3 col-form-label" })
                            <div class="col-sm-9">
                                @Html.DropDownListFor(model => model.DocumentType.DocumentReference, Model.DocumentReference, null, new { @class = "form-control form-control-sm", @style = "width: 100%;", id = "DocumentReference" })
                                @Html.ValidationMessageFor(model => model.DocumentType.DocumentReference, "", new { @class = "text-danger font-weight-light" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn-submit btn btn-primary" onclick="">Save</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section
    scripts {

    <script>

    var titleAdd = 'Add New Document Type',
        urlAddView = '@Url.Action("GetDocumentType", "DocumentType")',
        urlSave = '@Url.Action("Create", "DocumentType")';

    var titleEdit = 'Edit Document Type',
        urlEditView = '@Url.Action("GetDocumentType", "DocumentType")/',
        urlUpdate = '@Url.Action("Update", "DocumentType")/';

    var table = $('#DataTable').DataTable({
            processing: true,
            serverSide: true,
            paging: true,
            ajax: {
                url: '@Url.Action("getDocumentTypeDatatable", "DocumentType")',
                dataSrc: 'data',
                type: 'POST'
            },
            columns: [
                { name: 'DocumentTypeName', data: 'DocumentTypeName' },
                { name: 'FormName', data: 'FormName' },
                { name: 'PoolName', data: 'PoolName' },
                { name: 'DocumentReferenceName', data: 'DocumentReferenceName' },
                {
                    data: null, render: function (data, type, row) {
                        var editButton = `<button type="button" class="modal-update btn btn-primary" onclick="onClickEdit(titleEdit, urlEditView + ${row.DocumentTypeId}, urlUpdate + ${row.DocumentTypeId})"><i class="la la-edit"></i> Edit</button>&nbsp;`;
                        var deleteButton = `<button type="button" class="btn btn-danger" onclick="onClickDelete('@Url.Action("Delete", "DocumentType")' + '/' + ${row.DocumentTypeId})"><i class="la la-trash"></i> Delete</button>`;
                        return editButton + deleteButton;
                    }
                }
            ],
            columnDefs: [
                { targets: [4], orderable: false, className: "text-center", style: "max-width: 100px;"},
            ],
            initComplete: function () {
                var input = $('.dataTables_filter input').unbind(),
                    self = this.api(),
                    searchButton = $('<button class="btn btn-primary btn-sm rounded-0">')
                        .html('<i class="kt-menu__link-icon flaticon2-search"></i> ')
                        .click(function () {
                            self.search(input.val()).draw();
                        });
                $('.dataTables_filter').append(searchButton);
            }
        });

        $('#FormType, #DocumentReference').select2({
            theme: 'bootstrap4'
        });

        var formData = { username: 'brahmat', password: '@@123Anugerah1' , redirect: false};
        //console.log(data);
        //$.ajax({
        //    url: 'http://localhost:8080/bonita/loginservice',
        //    data: data,
        //    type: 'POST',
        //    contentType: 'application/x-www-form-urlencoded',
        //    success: function (data) {
        //        console.log(data);
        //    }
        //});

        $.ajax({
            url: "http://localhost:8080/bonita/loginservice",
            type: "POST",
            data: formData,
            xhrFields: { withCredentials: true },
            success: function (data, textStatus, jqXHR) {
                $.ajax({
                    url: "http://localhost:8080/bonita/API/system/session/1",
                    type: "GET",
                    xhrFields: { withCredentials: true },
                    success: function (data, textStatus, jqXHR) {
                        console.log('success getting session');
                        var apiToken = jqXHR.getResponseHeader('X-Bonita-API-Token');
                        console.log('X-Bonita-API-Token: ' + apiToken);
                        var formData = { "title": "Mr", "manager_id": "0", "job_title": "ICT", "lastname": "Rahmat", "firstname": "Benny" };
                        $.ajax({
                            url: "http://localhost:8080/bonita/API/identity/user/1",
                            type: "PUT",
                            contentType: "application/json",
                            /*passing the X-Bonita-API-Token for the CSRF security filter*/
                            headers: { 'X-Bonita-API-Token': apiToken },
                            data: JSON.stringify(formData),
                            xhrFields: { withCredentials: true },
                            success: function (data, textStatus, jqXHR) {
                                console.log('success updating user info');
                                console.log(data);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log('error updating user info');
                            }
                        });
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log('error getting session');
                    }
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log('error login');
            }
        });

        $('#PoolName').select2({
            theme: 'bootstrap4',
            minimumInputLength: 2,
            tags: [],
            ajax: {
                url: 'http://localhost:8080/bonita/API/bpm/process?p=0&c=10&o=displayName%20ASC&f=activationState%3dENABLED',
                dataType: 'json',
                type: "GET",
                quietMillis: 50,
                data: function (term) {
                    return {
                        term: term
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.completeName,
                                slug: item.slug,
                                id: item.id
                            }
                        })
                    };
                }
            }
        });

        function ajaxFormRequest(url) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                success: function (result) {
                    if (result.Status == "Success") {
                        $('#DocumentTypeId').val(result.Data.DocumentTypeId);
                        $('#DocumentTypeName').val(result.Data.DocumentTypeName);
                        $('#FormType').val(result.Data.FormType);
                        $('#PoolName').val(result.Data.PoolName);
                        $('#DocumentReference').val(result.Data.DocumentReference);

                        $('.field-validation-error').html("");
                        $("form").removeData("validator");
                        $("form").removeData("unobtrusiveValidation");

                        $('#modal-loading').hide();
                        $('#modal-form').show();
                        $.validator.unobtrusive.parse($('form'));
                    }
                }
            })
        };
    </script>

}